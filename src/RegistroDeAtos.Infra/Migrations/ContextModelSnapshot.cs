// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RegistroAtos.Infra.DataBase;

#nullable disable

namespace RegistroAtos.Infra.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RegistroAtos.Domain.Entidade.Casamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConjDoisId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConjUmId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataCasamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desabilitar")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ConjDoisId");

                    b.HasIndex("ConjUmId");

                    b.ToTable("Casamento", (string)null);
                });

            modelBuilder.Entity("RegistroAtos.Domain.Entidade.Conjuge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desabilitar")
                        .HasColumnType("boolean");

                    b.Property<Guid>("DocMaeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocPaiId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("PaiId")
                        .HasColumnType("uuid");

                    b.Property<int>("TipoPessoa")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocMaeId")
                        .IsUnique();

                    b.HasIndex("DocPaiId")
                        .IsUnique();

                    b.HasIndex("DocumentoId")
                        .IsUnique();

                    b.HasIndex("MaeId");

                    b.HasIndex("PaiId");

                    b.ToTable("Conjuge", (string)null);
                });

            modelBuilder.Entity("RegistroAtos.Domain.Entidade.Documento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desabilitar")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Documento");
                });

            modelBuilder.Entity("RegistroAtos.Domain.Entidade.Nascimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desabilitar")
                        .HasColumnType("boolean");

                    b.Property<Guid>("DocMaeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocPaiId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaiId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecemNascidoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocMaeId")
                        .IsUnique();

                    b.HasIndex("DocPaiId")
                        .IsUnique();

                    b.HasIndex("MaeId");

                    b.HasIndex("PaiId");

                    b.HasIndex("RecemNascidoId")
                        .IsUnique();

                    b.ToTable("Nascimento", (string)null);
                });

            modelBuilder.Entity("RegistroAtos.Domain.Entidade.Obito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataObito")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desabilitar")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FalecidoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaiId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FalecidoId")
                        .IsUnique();

                    b.HasIndex("MaeId");

                    b.HasIndex("PaiId");

                    b.ToTable("Obito", (string)null);
                });

            modelBuilder.Entity("RegistroAtos.Domain.Entidade.PessoaFisica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desabilitar")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TipoPessoa")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PessoaFisica", (string)null);
                });

            modelBuilder.Entity("RegistroAtos.Domain.Entidade.Casamento", b =>
                {
                    b.HasOne("RegistroAtos.Domain.Entidade.Conjuge", "ConjDois")
                        .WithMany("CasamentosConjugesDois")
                        .HasForeignKey("ConjDoisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegistroAtos.Domain.Entidade.Conjuge", "ConjUm")
                        .WithMany("CasamentosConjugesUm")
                        .HasForeignKey("ConjUmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConjDois");

                    b.Navigation("ConjUm");
                });

            modelBuilder.Entity("RegistroAtos.Domain.Entidade.Conjuge", b =>
                {
                    b.HasOne("RegistroAtos.Domain.Entidade.Documento", "DocMae")
                        .WithOne("ConjugeMae")
                        .HasForeignKey("RegistroAtos.Domain.Entidade.Conjuge", "DocMaeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegistroAtos.Domain.Entidade.Documento", "DocPai")
                        .WithOne("ConjugePai")
                        .HasForeignKey("RegistroAtos.Domain.Entidade.Conjuge", "DocPaiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegistroAtos.Domain.Entidade.Documento", "Documento")
                        .WithOne("Conjuge")
                        .HasForeignKey("RegistroAtos.Domain.Entidade.Conjuge", "DocumentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegistroAtos.Domain.Entidade.PessoaFisica", "Mae")
                        .WithMany("ConjugeMae")
                        .HasForeignKey("MaeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegistroAtos.Domain.Entidade.PessoaFisica", "Pai")
                        .WithMany("ConjugePai")
                        .HasForeignKey("PaiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocMae");

                    b.Navigation("DocPai");

                    b.Navigation("Documento");

                    b.Navigation("Mae");

                    b.Navigation("Pai");
                });

            modelBuilder.Entity("RegistroAtos.Domain.Entidade.Nascimento", b =>
                {
                    b.HasOne("RegistroAtos.Domain.Entidade.Documento", "DocMae")
                        .WithOne("NascimentoMae")
                        .HasForeignKey("RegistroAtos.Domain.Entidade.Nascimento", "DocMaeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegistroAtos.Domain.Entidade.Documento", "DocPai")
                        .WithOne("NascimentoPai")
                        .HasForeignKey("RegistroAtos.Domain.Entidade.Nascimento", "DocPaiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegistroAtos.Domain.Entidade.PessoaFisica", "Mae")
                        .WithMany("NascimentoMae")
                        .HasForeignKey("MaeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegistroAtos.Domain.Entidade.PessoaFisica", "Pai")
                        .WithMany("NascimentoPai")
                        .HasForeignKey("PaiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegistroAtos.Domain.Entidade.PessoaFisica", "RecemNascido")
                        .WithOne("NascimentoRecemNascido")
                        .HasForeignKey("RegistroAtos.Domain.Entidade.Nascimento", "RecemNascidoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocMae");

                    b.Navigation("DocPai");

                    b.Navigation("Mae");

                    b.Navigation("Pai");

                    b.Navigation("RecemNascido");
                });

            modelBuilder.Entity("RegistroAtos.Domain.Entidade.Obito", b =>
                {
                    b.HasOne("RegistroAtos.Domain.Entidade.PessoaFisica", "Falecido")
                        .WithOne("ObitoFalecido")
                        .HasForeignKey("RegistroAtos.Domain.Entidade.Obito", "FalecidoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegistroAtos.Domain.Entidade.PessoaFisica", "Mae")
                        .WithMany("ObitoMae")
                        .HasForeignKey("MaeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegistroAtos.Domain.Entidade.PessoaFisica", "Pai")
                        .WithMany("ObitoPai")
                        .HasForeignKey("PaiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Falecido");

                    b.Navigation("Mae");

                    b.Navigation("Pai");
                });

            modelBuilder.Entity("RegistroAtos.Domain.Entidade.Conjuge", b =>
                {
                    b.Navigation("CasamentosConjugesDois");

                    b.Navigation("CasamentosConjugesUm");
                });

            modelBuilder.Entity("RegistroAtos.Domain.Entidade.Documento", b =>
                {
                    b.Navigation("Conjuge")
                        .IsRequired();

                    b.Navigation("ConjugeMae")
                        .IsRequired();

                    b.Navigation("ConjugePai")
                        .IsRequired();

                    b.Navigation("NascimentoMae")
                        .IsRequired();

                    b.Navigation("NascimentoPai")
                        .IsRequired();
                });

            modelBuilder.Entity("RegistroAtos.Domain.Entidade.PessoaFisica", b =>
                {
                    b.Navigation("ConjugeMae");

                    b.Navigation("ConjugePai");

                    b.Navigation("NascimentoMae");

                    b.Navigation("NascimentoPai");

                    b.Navigation("NascimentoRecemNascido")
                        .IsRequired();

                    b.Navigation("ObitoFalecido")
                        .IsRequired();

                    b.Navigation("ObitoMae");

                    b.Navigation("ObitoPai");
                });
#pragma warning restore 612, 618
        }
    }
}
